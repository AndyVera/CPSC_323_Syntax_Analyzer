
----Lexeme: function          Token: Keyword----
<Opt Function Definitions> ::= <Function Definitions>  |  <Empty>
<Function Definitions> ::= <Function> | <Function> <Function Definitions>
function  <Identifier> ( <Opt Parameter List> )  <Opt Declaration List>  <Body>

----Lexeme: convert__temp     Token: Identifier----
function  <Identifier>   ( <Opt Parameter List> )  <Opt Declaration List>  <Body>

----Lexeme: (                 Token: Separator----
function  <Identifier>   ( <Opt Parameter List> )  <Opt Declaration List>  <Body>

----Lexeme: fahr              Token: Identifier----
<IDs> ::=     <Identifier>    | <Identifier>, <IDs> 

----Lexeme: integer           Token: Keyword----
<Qualifier> ::= integer    |    boolean    |  real
<Opt Parameter List> ::=  <Parameter List>    |     <Empty>
<Parameter List>  ::=  <Parameter>    |     <Parameter> , <Parameter List>
<Parameter> ::=  <IDs >  <Qualifier

----Lexeme: )                 Token: Separator----
function  <Identifier>   ( <Opt Parameter List> )  <Opt Declaration List>  <Body>

----Lexeme: integer           Token: Keyword----
<Qualifier> ::= integer    |    boolean    |  real

----Lexeme: degree            Token: Identifier----
<IDs> ::=     <Identifier>    | <Identifier>, <IDs> 
<Opt Declaration List> ::= <Declaration List>   |    <Empty>
<Declaration List>  := <Declaration> ;     |     <Declaration> ; <Declaration List>
<Declaration> ::=   <Qualifier > <IDs>

----Lexeme: ;                 Token: Separator----

----Lexeme: {                 Token: Separator----
<Body>  ::=  {  < Statement List>  }
<Statement> ::=   <Compound>  |  <Assign>  |   <If>  |  <Return>   | <Print>   |   <Scan>   |  <While> 
<Compound> ::=   {  <Statement List>  }

----Lexeme: degree            Token: Identifier----
<Statement> ::=   <Compound>  |  <Assign>  |   <If>  |  <Return>   | <Print>   |   <Scan>   |  <While> 

----Lexeme: =                 Token: Operator----
<Assign> ::=     <Identifier> = <Expression>

----Lexeme: 15                Token: Integer----
<Expression>  ::=    <Term> <Expression’>   |    <Term>
<Term>    ::=     <Factor> <Term’>    |   <Factor>
<Factor> ::= <Primary>
<Primary> ::=     <Identifier>  |  <Integer>  |   <Identifier>  ( <IDs> )   |   ( <Expression> )   |  <Real>  |   true   |  false 

----Lexeme: +                 Token: Operator----
Expression>  ::=    <Term> <Expression’>   |    <Term>
<Expression’> ::= + <Term> <Expression’> | -  <Term> <Expression’> | ε

----Lexeme: 30                Token: Integer----
<Expression>  ::=    <Term> <Expression’>   |    <Term>
<Term>    ::=     <Factor> <Term’>    |   <Factor>
<Factor> ::= <Primary>
<Primary> ::=     <Identifier>  |  <Integer>  |   <Identifier>  ( <IDs> )   |   ( <Expression> )   |  <Real>  |   true   |  false 

----Lexeme: ;                 Token: Separator----

----Lexeme: }                 Token: Separator----

----Lexeme: #                 Token: Separator----

----Lexeme: integer           Token: Keyword----
<Qualifier> ::= integer    |    boolean    |  real

----Lexeme: number2           Token: Identifier----
<IDs> ::=     <Identifier>    | <Identifier>, <IDs> 
<Opt Declaration List> ::= <Declaration List>   |    <Empty>
<Declaration List>  := <Declaration> ;     |     <Declaration> ; <Declaration List>
<Declaration> ::=   <Qualifier > <IDs>

----Lexeme: ;                 Token: Separator----

----Lexeme: real              Token: Keyword----
<Qualifier> ::= integer    |    boolean    |  real

----Lexeme: number3           Token: Identifier----
<IDs> ::=     <Identifier>    | <Identifier>, <IDs> 
<Opt Declaration List> ::= <Declaration List>   |    <Empty>
<Declaration List>  := <Declaration> ;     |     <Declaration> ; <Declaration List>
<Declaration> ::=   <Qualifier > <IDs>

----Lexeme: ;                 Token: Separator----

----Lexeme: number2           Token: Identifier----
<Statement> ::=   <Compound>  |  <Assign>  |   <If>  |  <Return>   | <Print>   |   <Scan>   |  <While> 

----Lexeme: =                 Token: Operator----
<Assign> ::=     <Identifier> = <Expression>

----Lexeme: 25                Token: Integer----
<Expression>  ::=    <Term> <Expression’>   |    <Term>
<Term>    ::=     <Factor> <Term’>    |   <Factor>
<Factor> ::= <Primary>
<Primary> ::=     <Identifier>  |  <Integer>  |   <Identifier>  ( <IDs> )   |   ( <Expression> )   |  <Real>  |   true   |  false 

----Lexeme: +                 Token: Operator----
Expression>  ::=    <Term> <Expression’>   |    <Term>
<Expression’> ::= + <Term> <Expression’> | -  <Term> <Expression’> | ε

----Lexeme: 10                Token: Integer----
<Expression>  ::=    <Term> <Expression’>   |    <Term>
<Term>    ::=     <Factor> <Term’>    |   <Factor>
<Factor> ::= <Primary>
<Primary> ::=     <Identifier>  |  <Integer>  |   <Identifier>  ( <IDs> )   |   ( <Expression> )   |  <Real>  |   true   |  false 

----Lexeme: ;                 Token: Separator----

----Lexeme: #                 Token: Separator----
